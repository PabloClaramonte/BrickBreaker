#include "Interaccion.h"
#include "math.h"
//Función que limita el movimiento dentro del mapa, dado por las componentes X y Z del plano SUELO:

void INTERACCIONES::INTERACCION_JUGADOR_TABLERO(JUGADOR& HEROE, TABLERO SUELO)
{
	if (HEROE.POSICION.X < 0)
	{
		HEROE.POSICION.X = 0;
	}

	else if (HEROE.POSICION.Z < 0)
	{
		HEROE.POSICION.Z = 0;
	}

	else if (HEROE.POSICION.X > SUELO.XMAX)
	{
		HEROE.POSICION.X = SUELO.XMAX;
	}

	else if (HEROE.POSICION.Z > SUELO.ZMAX)
	{
		HEROE.POSICION.Z = SUELO.ZMAX;
	}

	else
	{
		NULL;
	}
}

//Función que evita que el jugador atraviese las columnas:

void INTERACCIONES::INTERACCION_JUGADOR_COLUMNA(JUGADOR& HEROE, COLUMNA _COLUMNA)
{
	if (HEROE.POSICION.X > _COLUMNA.POSICION.X - (_COLUMNA.TAMANOCOLUMNA / 2) && HEROE.POSICION.X < _COLUMNA.POSICION.X + (_COLUMNA.TAMANOCOLUMNA / 2) && HEROE.POSICION.Z < _COLUMNA.POSICION.Z + _COLUMNA.TAMANOCOLUMNA && HEROE.POSICION.Z > _COLUMNA.POSICION.Z + (_COLUMNA.TAMANOCOLUMNA / 2))
	{
		HEROE.POSICION.Z = _COLUMNA.POSICION.Z + _COLUMNA.TAMANOCOLUMNA;
	}
	else if (HEROE.POSICION.X > _COLUMNA.POSICION.X - (_COLUMNA.TAMANOCOLUMNA / 2) && HEROE.POSICION.X < _COLUMNA.POSICION.X + (_COLUMNA.TAMANOCOLUMNA / 2) && HEROE.POSICION.Z > _COLUMNA.POSICION.Z - _COLUMNA.TAMANOCOLUMNA && HEROE.POSICION.Z < _COLUMNA.POSICION.Z + (_COLUMNA.TAMANOCOLUMNA / 2))
	{
		HEROE.POSICION.Z = _COLUMNA.POSICION.Z - _COLUMNA.TAMANOCOLUMNA;
	}
	else if (HEROE.POSICION.Z > _COLUMNA.POSICION.Z - (_COLUMNA.TAMANOCOLUMNA / 2) && HEROE.POSICION.Z < _COLUMNA.POSICION.Z + (_COLUMNA.TAMANOCOLUMNA / 2) && HEROE.POSICION.X > _COLUMNA.POSICION.X - _COLUMNA.TAMANOCOLUMNA && HEROE.POSICION.X < _COLUMNA.POSICION.X - (_COLUMNA.TAMANOCOLUMNA / 2))
	{
		HEROE.POSICION.X = _COLUMNA.POSICION.X - _COLUMNA.TAMANOCOLUMNA;
	}
	else if (HEROE.POSICION.Z > _COLUMNA.POSICION.Z - (_COLUMNA.TAMANOCOLUMNA / 2) && HEROE.POSICION.Z < _COLUMNA.POSICION.Z + (_COLUMNA.TAMANOCOLUMNA / 2) && HEROE.POSICION.X < _COLUMNA.POSICION.X + _COLUMNA.TAMANOCOLUMNA && HEROE.POSICION.X > _COLUMNA.POSICION.X + (_COLUMNA.TAMANOCOLUMNA / 2))
	{
		HEROE.POSICION.X = _COLUMNA.POSICION.X + _COLUMNA.TAMANOCOLUMNA;
	}
	else
	{
		NULL;
	}
}

//Función que evita que los zombies atraviesen las columnas:

void INTERACCIONES::INTERACCION_ZOMBIE_COLUMNA(ZOMBIE& MALO, COLUMNA _COLUMNA)
{
	if (MALO.POSICION.X > _COLUMNA.POSICION.X - (_COLUMNA.TAMANOCOLUMNA / 2) && MALO.POSICION.X < _COLUMNA.POSICION.X + (_COLUMNA.TAMANOCOLUMNA / 2) && MALO.POSICION.Z < _COLUMNA.POSICION.Z + _COLUMNA.TAMANOCOLUMNA && MALO.POSICION.Z > _COLUMNA.POSICION.Z + (_COLUMNA.TAMANOCOLUMNA / 2))
	{
		MALO.POSICION.Z = _COLUMNA.POSICION.Z + _COLUMNA.TAMANOCOLUMNA;
	}
	else if (MALO.POSICION.X > _COLUMNA.POSICION.X - (_COLUMNA.TAMANOCOLUMNA / 2) && MALO.POSICION.X < _COLUMNA.POSICION.X + (_COLUMNA.TAMANOCOLUMNA / 2) && MALO.POSICION.Z > _COLUMNA.POSICION.Z - _COLUMNA.TAMANOCOLUMNA && MALO.POSICION.Z < _COLUMNA.POSICION.Z + (_COLUMNA.TAMANOCOLUMNA / 2))
	{
		MALO.POSICION.Z = _COLUMNA.POSICION.Z - _COLUMNA.TAMANOCOLUMNA;
	}
	else if (MALO.POSICION.Z > _COLUMNA.POSICION.Z - (_COLUMNA.TAMANOCOLUMNA / 2) && MALO.POSICION.Z < _COLUMNA.POSICION.Z + (_COLUMNA.TAMANOCOLUMNA / 2) && MALO.POSICION.X > _COLUMNA.POSICION.X - _COLUMNA.TAMANOCOLUMNA && MALO.POSICION.X < _COLUMNA.POSICION.X - (_COLUMNA.TAMANOCOLUMNA / 2))
	{
		MALO.POSICION.X = _COLUMNA.POSICION.X - _COLUMNA.TAMANOCOLUMNA;
	}
	else if (MALO.POSICION.Z > _COLUMNA.POSICION.Z - (_COLUMNA.TAMANOCOLUMNA / 2) && MALO.POSICION.Z < _COLUMNA.POSICION.Z + (_COLUMNA.TAMANOCOLUMNA / 2) && MALO.POSICION.X < _COLUMNA.POSICION.X + _COLUMNA.TAMANOCOLUMNA && MALO.POSICION.X > _COLUMNA.POSICION.X + (_COLUMNA.TAMANOCOLUMNA / 2))
	{
		MALO.POSICION.X = _COLUMNA.POSICION.X + _COLUMNA.TAMANOCOLUMNA;
	}
	else
	{
		NULL;
	}
}

//Función que hace que el jugador emita un disparo al pulsar la tecla espacio (" "):

void INTERACCIONES::INTERACCION_JUGADOR_DISPARO(JUGADOR& HEROE, DISPARO& BALA)
{
	if (HEROE.WSAD == ' ')
	{
		//ETSIDI::play("sonidos/disparo.wav"); //Se raya mazo

		if (BALA.TIEMPODISPARO <= 10)
		{
			switch (BALA.DIRECCION)
			{

			case 'w':
			{
				BALA.POSICION.Z -= BALA.VELOCIDAD;
				BALA.TIEMPODISPARO++;
				break;
			}

			case 's':
			{
				BALA.POSICION.Z += BALA.VELOCIDAD;
				BALA.TIEMPODISPARO++;
				break;
			}

			case 'a':
			{
				BALA.POSICION.X -= BALA.VELOCIDAD;
				BALA.TIEMPODISPARO++;
				break;
			}

			case 'd':
			{
				BALA.POSICION.X += BALA.VELOCIDAD;
				BALA.TIEMPODISPARO++;
				break;
			}

			default:
			{
				break;
			}

			}
		}

		else
		{
			HEROE.WSAD = NULL;
		}
	}

	else
	{
		BALA.POSICION.X = HEROE.POSICION.X;
		BALA.POSICION.Y = HEROE.POSICION.Y;
		BALA.POSICION.Z = HEROE.POSICION.Z;

		BALA.DIRECCION = HEROE.PREWSAD;

		BALA.TIEMPODISPARO = 0;
	}
}

//Función que cambia el estado del zombie al ser impactado por un disparo

bool INTERACCIONES::INTERACCION_BALA_ZOMBIE(DISPARO& BALA, ZOMBIE& MALO)
{
	if (BALA.POSICION.X > MALO.POSICION.X - 2 && BALA.POSICION.X < MALO.POSICION.X + 2 && BALA.POSICION.Z > MALO.POSICION.Z - 2 && BALA.POSICION.Z < MALO.POSICION.Z + 2 && MALO.VIVO)
	{
		MALO.VIVO = false; //El estado del zombie pasa a muerto.
		
		ETSIDI::play("sonidos/impacto.wav"); //Sonido jocoso
	}

	else
	{
		NULL;
	}

	return MALO.VIVO;
}

void INTERACCIONES::INTELIGENCIA_ARTIFICIAL_ZOMBIE(JUGADOR HEROE, ZOMBIE& MALO)
{
	if (HEROE.POSICION.X >= MALO.POSICION.X)
	{
		MALO.ANGULO = atanf((HEROE.POSICION.Z - MALO.POSICION.Z) / (HEROE.POSICION.X - MALO.POSICION.X));
	}

	else
	{
		if (HEROE.POSICION.Z <= MALO.POSICION.Z)
		{
			MALO.ANGULO = -(3.1416 - atanf((HEROE.POSICION.Z - MALO.POSICION.Z) / (HEROE.POSICION.X - MALO.POSICION.X)));
		}

		else
		{
			MALO.ANGULO = (3.1416 + atanf((HEROE.POSICION.Z - MALO.POSICION.Z) / (HEROE.POSICION.X - MALO.POSICION.X)));
		}
	}
}

void INTERACCIONES::INTERACCION_JUGADOR_TECLADO(JUGADOR& HEROE, unsigned char TECLA)
{
	switch (TECLA)
	{
	case 'w':
	{
		HEROE.WSAD = 'w';
		HEROE.PREWSAD = 'w';
		break;
	}

	case 's':
	{
		HEROE.WSAD = 's';
		HEROE.PREWSAD = 's';
		break;
	}

	case 'a':
	{
		HEROE.WSAD = 'a';
		HEROE.PREWSAD = 'a';
		break;
	}

	case 'd':
	{
		HEROE.WSAD = 'd';
		HEROE.PREWSAD = 'd';
		break;
	}

	case ' ':
	{
		HEROE.WSAD = ' ';
		break;
	}
	default:
	{
		break;
	}

	}
}

void INTERACCIONES::CHOQUE_ENTRE_ZOMBIES(ZOMBIE& MALO1, ZOMBIE& MALO2)
{
	if (MALO1.VIVO) 
	{
		if (MALO1.POSICION.X > MALO2.POSICION.X - 2 && MALO1.POSICION.X < MALO2.POSICION.X + 2 && MALO1.POSICION.Z < MALO2.POSICION.Z + 2 && MALO1.POSICION.Z > MALO2.POSICION.Z + 2)
		{
			MALO1.POSICION.Z = MALO2.POSICION.Z + 2;
		}
		else if (MALO1.POSICION.X > MALO2.POSICION.X - 2 && MALO1.POSICION.X < MALO2.POSICION.X + 2 && MALO1.POSICION.Z > MALO2.POSICION.Z - 2 && MALO1.POSICION.Z < MALO2.POSICION.Z + 2)
		{
			MALO1.POSICION.Z = MALO2.POSICION.Z - 2;
		}
		else if (MALO1.POSICION.Z > MALO2.POSICION.Z - 2 && MALO1.POSICION.Z < MALO2.POSICION.Z + 2 && MALO1.POSICION.X > MALO2.POSICION.X - 2 && MALO1.POSICION.X < MALO2.POSICION.X - 2)
		{
			MALO1.POSICION.X = MALO2.POSICION.X - 2;
		}
		else if (MALO1.POSICION.Z > MALO2.POSICION.Z - 2 && MALO1.POSICION.Z < MALO2.POSICION.Z + 2 && MALO1.POSICION.X < MALO2.POSICION.X + 2 && MALO1.POSICION.X > MALO2.POSICION.X + 2)
		{
			MALO1.POSICION.X = MALO2.POSICION.X + 2;
		}
		else
		{
			NULL;
		}
	}
	else
	{
		NULL;
	}
}




